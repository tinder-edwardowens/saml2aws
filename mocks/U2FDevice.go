// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import u2fhost "github.com/marshallbrekka/go-u2fhost"

// U2FDevice is an autogenerated mock type for the U2FDevice type
type U2FDevice struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: _a0
func (_m *U2FDevice) Authenticate(_a0 *u2fhost.AuthenticateRequest) (*u2fhost.AuthenticateResponse, error) {
	ret := _m.Called(_a0)

	var r0 *u2fhost.AuthenticateResponse
	if rf, ok := ret.Get(0).(func(*u2fhost.AuthenticateRequest) *u2fhost.AuthenticateResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*u2fhost.AuthenticateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*u2fhost.AuthenticateRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *U2FDevice) Close() {
	_m.Called()
}

// Open provides a mock function with given fields:
func (_m *U2FDevice) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: _a0
func (_m *U2FDevice) Register(_a0 *u2fhost.RegisterRequest) (*u2fhost.RegisterResponse, error) {
	ret := _m.Called(_a0)

	var r0 *u2fhost.RegisterResponse
	if rf, ok := ret.Get(0).(func(*u2fhost.RegisterRequest) *u2fhost.RegisterResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*u2fhost.RegisterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*u2fhost.RegisterRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with given fields:
func (_m *U2FDevice) Version() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
